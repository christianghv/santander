/*
 * Credits
 * The Credits API provides information about customer credit lines.
 *
 * OpenAPI spec version: 2.2.0
 * Contact: gipinacho@santander.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Card;
import io.swagger.client.model.Credit;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * CreditList
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-04-11T10:52:34.405704-05:00[America/Bogota]")
public class CreditList extends Credit {
  @SerializedName("url")
  private String url = null;

  @SerializedName("related_cards")
  private List<Card> relatedCards = null;

  @SerializedName("available_products")
  private List<Object> availableProducts = null;

  @SerializedName("balances")
  private Object balances = null;

  public CreditList url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The URL for the next step in the user experience.
   * @return url
  **/
  @Schema(example = "/credits/{credit-key}", required = true, description = "The URL for the next step in the user experience.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public CreditList relatedCards(List<Card> relatedCards) {
    this.relatedCards = relatedCards;
    return this;
  }

  public CreditList addRelatedCardsItem(Card relatedCardsItem) {
    if (this.relatedCards == null) {
      this.relatedCards = new ArrayList<Card>();
    }
    this.relatedCards.add(relatedCardsItem);
    return this;
  }

   /**
   * Card associated with the credit line.
   * @return relatedCards
  **/
  @Schema(description = "Card associated with the credit line.")
  public List<Card> getRelatedCards() {
    return relatedCards;
  }

  public void setRelatedCards(List<Card> relatedCards) {
    this.relatedCards = relatedCards;
  }

  public CreditList availableProducts(List<Object> availableProducts) {
    this.availableProducts = availableProducts;
    return this;
  }

  public CreditList addAvailableProductsItem(Object availableProductsItem) {
    if (this.availableProducts == null) {
      this.availableProducts = new ArrayList<Object>();
    }
    this.availableProducts.add(availableProductsItem);
    return this;
  }

   /**
   * EXPAND: Credit products associated with the credit line. (This information its ONLY RETRIEVED if the expand parameter contains *available_products*)
   * @return availableProducts
  **/
  @Schema(description = "EXPAND: Credit products associated with the credit line. (This information its ONLY RETRIEVED if the expand parameter contains *available_products*)")
  public List<Object> getAvailableProducts() {
    return availableProducts;
  }

  public void setAvailableProducts(List<Object> availableProducts) {
    this.availableProducts = availableProducts;
  }

  public CreditList balances(Object balances) {
    this.balances = balances;
    return this;
  }

   /**
   * EXPAND: The available balances of a credit line. (This information its ONLY RETRIEVED if the expand parameter contains *balances*)
   * @return balances
  **/
  @Schema(description = "EXPAND: The available balances of a credit line. (This information its ONLY RETRIEVED if the expand parameter contains *balances*)")
  public Object getBalances() {
    return balances;
  }

  public void setBalances(Object balances) {
    this.balances = balances;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditList creditList = (CreditList) o;
    return Objects.equals(this.url, creditList.url) &&
        Objects.equals(this.relatedCards, creditList.relatedCards) &&
        Objects.equals(this.availableProducts, creditList.availableProducts) &&
        Objects.equals(this.balances, creditList.balances) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, relatedCards, availableProducts, balances, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditList {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    relatedCards: ").append(toIndentedString(relatedCards)).append("\n");
    sb.append("    availableProducts: ").append(toIndentedString(availableProducts)).append("\n");
    sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
