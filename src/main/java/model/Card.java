/*
 * Credits
 * The Credits API provides information about customer credit lines.
 *
 * OpenAPI spec version: 2.2.0
 * Contact: gipinacho@santander.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CardType;
import io.swagger.client.model.Product;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Retrieves the card basic information
 */
@Schema(description = "Retrieves the card basic information")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-04-11T10:52:34.405704-05:00[America/Bogota]")
public class Card {
  @SerializedName("key")
  private String key = null;

  @SerializedName("display_number")
  private String displayNumber = null;

  /**
   * The type of relationship between the card and the customer. This relation indicates whether the card is the main card for the customer or it&#x27;s an additional one.
   */
  @JsonAdapter(RelationTypeEnum.Adapter.class)
  public enum RelationTypeEnum {
    PRIMARY("PRIMARY"),
    ADDITIONAL("ADDITIONAL"),
    SECONDARY("SECONDARY");

    private String value;

    RelationTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RelationTypeEnum fromValue(String input) {
      for (RelationTypeEnum b : RelationTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RelationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RelationTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RelationTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("relation_type")
  private RelationTypeEnum relationType = null;

  /**
   * Indicates the status of the card.   * &#x60;ACTIVE&#x60; -  The card is in an active state and the customer can operate with it.   * &#x60;ACTIVATION_PENDING&#x60; -  The card is pending of activation and the customer can start a activation process in order to activate the card.   * &#x60;TEMPORAL_LOCK&#x60; - The card has a temporal lock, which means the customer  locked up manually or the bank institution blocked  the card for some reason. This lock is reversible and therefore, the customer can start an unblocking process to unlock the card at anytime.   * &#x60;DEFINITIVE_LOCK&#x60; - The card has a definitive lock, which means the customer could have reported it as stolen or missing and the bank institution locked definetly in order to protect the customer finances. The card cannot operate in this state. This lock state is irreversible. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    ACTIVATION_PENDING("ACTIVATION_PENDING"),
    TEMPORAL_LOCK("TEMPORAL_LOCK"),
    DEFINITIVE_LOCK("DEFINITIVE_LOCK");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("holder_name")
  private String holderName = null;

  @SerializedName("image_url")
  private String imageUrl = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("expiration_date")
  private String expirationDate = null;

  @SerializedName("type")
  private CardType type = null;

  @SerializedName("product")
  private Product product = null;

  public Card key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Card unique identifier
   * @return key
  **/
  @Schema(example = "4e20fbb243684d9eb19ff33a50ee422e", description = "Card unique identifier")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public Card displayNumber(String displayNumber) {
    this.displayNumber = displayNumber;
    return this;
  }

   /**
   * Anonymized card number.
   * @return displayNumber
  **/
  @Schema(example = "*1234", description = "Anonymized card number.")
  public String getDisplayNumber() {
    return displayNumber;
  }

  public void setDisplayNumber(String displayNumber) {
    this.displayNumber = displayNumber;
  }

  public Card relationType(RelationTypeEnum relationType) {
    this.relationType = relationType;
    return this;
  }

   /**
   * The type of relationship between the card and the customer. This relation indicates whether the card is the main card for the customer or it&#x27;s an additional one.
   * @return relationType
  **/
  @Schema(description = "The type of relationship between the card and the customer. This relation indicates whether the card is the main card for the customer or it's an additional one.")
  public RelationTypeEnum getRelationType() {
    return relationType;
  }

  public void setRelationType(RelationTypeEnum relationType) {
    this.relationType = relationType;
  }

  public Card status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Indicates the status of the card.   * &#x60;ACTIVE&#x60; -  The card is in an active state and the customer can operate with it.   * &#x60;ACTIVATION_PENDING&#x60; -  The card is pending of activation and the customer can start a activation process in order to activate the card.   * &#x60;TEMPORAL_LOCK&#x60; - The card has a temporal lock, which means the customer  locked up manually or the bank institution blocked  the card for some reason. This lock is reversible and therefore, the customer can start an unblocking process to unlock the card at anytime.   * &#x60;DEFINITIVE_LOCK&#x60; - The card has a definitive lock, which means the customer could have reported it as stolen or missing and the bank institution locked definetly in order to protect the customer finances. The card cannot operate in this state. This lock state is irreversible. 
   * @return status
  **/
  @Schema(description = "Indicates the status of the card.   * `ACTIVE` -  The card is in an active state and the customer can operate with it.   * `ACTIVATION_PENDING` -  The card is pending of activation and the customer can start a activation process in order to activate the card.   * `TEMPORAL_LOCK` - The card has a temporal lock, which means the customer  locked up manually or the bank institution blocked  the card for some reason. This lock is reversible and therefore, the customer can start an unblocking process to unlock the card at anytime.   * `DEFINITIVE_LOCK` - The card has a definitive lock, which means the customer could have reported it as stolen or missing and the bank institution locked definetly in order to protect the customer finances. The card cannot operate in this state. This lock state is irreversible. ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Card holderName(String holderName) {
    this.holderName = holderName;
    return this;
  }

   /**
   * Refers to the card owner&#x27;s name, this is the name displayed on the card.
   * @return holderName
  **/
  @Schema(example = "Raul J. Hernandez C.", description = "Refers to the card owner's name, this is the name displayed on the card.")
  public String getHolderName() {
    return holderName;
  }

  public void setHolderName(String holderName) {
    this.holderName = holderName;
  }

  public Card imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * The URL to the image which represents the card.
   * @return imageUrl
  **/
  @Schema(example = "/img/MC_BASICA.jpg", description = "The URL to the image which represents the card.")
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public Card url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The url for the detailed card information.
   * @return url
  **/
  @Schema(example = "/cards/{card-key}", description = "The url for the detailed card information.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public Card description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the card product.
   * @return description
  **/
  @Schema(example = "Aeromexico Blanca", description = "Description of the card product.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Card expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * The date when the card is no longer valid.
   * @return expirationDate
  **/
  @Schema(example = "11/19", description = "The date when the card is no longer valid.")
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }

  public Card type(CardType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public CardType getType() {
    return type;
  }

  public void setType(CardType type) {
    this.type = type;
  }

  public Card product(Product product) {
    this.product = product;
    return this;
  }

   /**
   * Get product
   * @return product
  **/
  @Schema(description = "")
  public Product getProduct() {
    return product;
  }

  public void setProduct(Product product) {
    this.product = product;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Card card = (Card) o;
    return Objects.equals(this.key, card.key) &&
        Objects.equals(this.displayNumber, card.displayNumber) &&
        Objects.equals(this.relationType, card.relationType) &&
        Objects.equals(this.status, card.status) &&
        Objects.equals(this.holderName, card.holderName) &&
        Objects.equals(this.imageUrl, card.imageUrl) &&
        Objects.equals(this.url, card.url) &&
        Objects.equals(this.description, card.description) &&
        Objects.equals(this.expirationDate, card.expirationDate) &&
        Objects.equals(this.type, card.type) &&
        Objects.equals(this.product, card.product);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, displayNumber, relationType, status, holderName, imageUrl, url, description, expirationDate, type, product);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Card {\n");
    
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    displayNumber: ").append(toIndentedString(displayNumber)).append("\n");
    sb.append("    relationType: ").append(toIndentedString(relationType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    holderName: ").append(toIndentedString(holderName)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
