/*
 * Credits
 * The Credits API provides information about customer credit lines.
 *
 * OpenAPI spec version: 2.2.0
 * Contact: gipinacho@santander.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AssistanceDetail;
import io.swagger.client.model.DigitalChannelDetail;
import io.swagger.client.model.DomiciliationDetail;
import io.swagger.client.model.PaymentDetail;
import io.swagger.client.model.PayrollDetail;
import io.swagger.client.model.RecurrentPaymentDetail;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Retrieves the period basic information
 */
@Schema(description = "Retrieves the period basic information")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-04-11T10:52:34.405704-05:00[America/Bogota]")
public class PeriodDetail {
  @SerializedName("period_id")
  private Integer periodId = null;

  @SerializedName("initial_date")
  private OffsetDateTime initialDate = null;

  @SerializedName("due_date")
  private OffsetDateTime dueDate = null;

  @SerializedName("accumulated_purchases")
  private AllOfPeriodDetailAccumulatedPurchases accumulatedPurchases = null;

  @SerializedName("card_payment")
  private List<PaymentDetail> cardPayment = null;

  @SerializedName("recurrent_payment")
  private List<RecurrentPaymentDetail> recurrentPayment = null;

  @SerializedName("domiciliation")
  private List<DomiciliationDetail> domiciliation = null;

  @SerializedName("assistance")
  private List<AssistanceDetail> assistance = null;

  @SerializedName("payroll_portability")
  private List<PayrollDetail> payrollPortability = null;

  @SerializedName("digital_channels")
  private List<DigitalChannelDetail> digitalChannels = null;

  /**
   * Indicates the status of the period.   * &#x60;ONGOING&#x60; -  Indicates that status for period is in progress.   * &#x60;FINISH&#x60; - Indicates that the period has ended. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ONGOING("ONGOING"),
    FINISH("FINISH");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public PeriodDetail periodId(Integer periodId) {
    this.periodId = periodId;
    return this;
  }

   /**
   * Period identifier of benefit 
   * @return periodId
  **/
  @Schema(example = "1", description = "Period identifier of benefit ")
  public Integer getPeriodId() {
    return periodId;
  }

  public void setPeriodId(Integer periodId) {
    this.periodId = periodId;
  }

  public PeriodDetail initialDate(OffsetDateTime initialDate) {
    this.initialDate = initialDate;
    return this;
  }

   /**
   * This date specifies the initial date for the period of benefit [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html
   * @return initialDate
  **/
  @Schema(example = "2022-02-16T23:38:45.408Z", description = "This date specifies the initial date for the period of benefit [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html")
  public OffsetDateTime getInitialDate() {
    return initialDate;
  }

  public void setInitialDate(OffsetDateTime initialDate) {
    this.initialDate = initialDate;
  }

  public PeriodDetail dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

   /**
   * This date specifies the last day for the period to benefit. [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html
   * @return dueDate
  **/
  @Schema(example = "2012-02-16T23:38:45.408Z", description = "This date specifies the last day for the period to benefit. [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html")
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }

  public PeriodDetail accumulatedPurchases(AllOfPeriodDetailAccumulatedPurchases accumulatedPurchases) {
    this.accumulatedPurchases = accumulatedPurchases;
    return this;
  }

   /**
   * Accumulated amount purchases
   * @return accumulatedPurchases
  **/
  @Schema(description = "Accumulated amount purchases")
  public AllOfPeriodDetailAccumulatedPurchases getAccumulatedPurchases() {
    return accumulatedPurchases;
  }

  public void setAccumulatedPurchases(AllOfPeriodDetailAccumulatedPurchases accumulatedPurchases) {
    this.accumulatedPurchases = accumulatedPurchases;
  }

  public PeriodDetail cardPayment(List<PaymentDetail> cardPayment) {
    this.cardPayment = cardPayment;
    return this;
  }

  public PeriodDetail addCardPaymentItem(PaymentDetail cardPaymentItem) {
    if (this.cardPayment == null) {
      this.cardPayment = new ArrayList<PaymentDetail>();
    }
    this.cardPayment.add(cardPaymentItem);
    return this;
  }

   /**
   * Indicate the payment card detail.
   * @return cardPayment
  **/
  @Schema(description = "Indicate the payment card detail.")
  public List<PaymentDetail> getCardPayment() {
    return cardPayment;
  }

  public void setCardPayment(List<PaymentDetail> cardPayment) {
    this.cardPayment = cardPayment;
  }

  public PeriodDetail recurrentPayment(List<RecurrentPaymentDetail> recurrentPayment) {
    this.recurrentPayment = recurrentPayment;
    return this;
  }

  public PeriodDetail addRecurrentPaymentItem(RecurrentPaymentDetail recurrentPaymentItem) {
    if (this.recurrentPayment == null) {
      this.recurrentPayment = new ArrayList<RecurrentPaymentDetail>();
    }
    this.recurrentPayment.add(recurrentPaymentItem);
    return this;
  }

   /**
   * Indicates the card recurrent payment detail.
   * @return recurrentPayment
  **/
  @Schema(description = "Indicates the card recurrent payment detail.")
  public List<RecurrentPaymentDetail> getRecurrentPayment() {
    return recurrentPayment;
  }

  public void setRecurrentPayment(List<RecurrentPaymentDetail> recurrentPayment) {
    this.recurrentPayment = recurrentPayment;
  }

  public PeriodDetail domiciliation(List<DomiciliationDetail> domiciliation) {
    this.domiciliation = domiciliation;
    return this;
  }

  public PeriodDetail addDomiciliationItem(DomiciliationDetail domiciliationItem) {
    if (this.domiciliation == null) {
      this.domiciliation = new ArrayList<DomiciliationDetail>();
    }
    this.domiciliation.add(domiciliationItem);
    return this;
  }

   /**
   * Indicate the status for domiciliation
   * @return domiciliation
  **/
  @Schema(description = "Indicate the status for domiciliation")
  public List<DomiciliationDetail> getDomiciliation() {
    return domiciliation;
  }

  public void setDomiciliation(List<DomiciliationDetail> domiciliation) {
    this.domiciliation = domiciliation;
  }

  public PeriodDetail assistance(List<AssistanceDetail> assistance) {
    this.assistance = assistance;
    return this;
  }

  public PeriodDetail addAssistanceItem(AssistanceDetail assistanceItem) {
    if (this.assistance == null) {
      this.assistance = new ArrayList<AssistanceDetail>();
    }
    this.assistance.add(assistanceItem);
    return this;
  }

   /**
   * Indicate the status for assistance
   * @return assistance
  **/
  @Schema(description = "Indicate the status for assistance")
  public List<AssistanceDetail> getAssistance() {
    return assistance;
  }

  public void setAssistance(List<AssistanceDetail> assistance) {
    this.assistance = assistance;
  }

  public PeriodDetail payrollPortability(List<PayrollDetail> payrollPortability) {
    this.payrollPortability = payrollPortability;
    return this;
  }

  public PeriodDetail addPayrollPortabilityItem(PayrollDetail payrollPortabilityItem) {
    if (this.payrollPortability == null) {
      this.payrollPortability = new ArrayList<PayrollDetail>();
    }
    this.payrollPortability.add(payrollPortabilityItem);
    return this;
  }

   /**
   * Displays the customer&#x27;s payroll portability information.
   * @return payrollPortability
  **/
  @Schema(description = "Displays the customer's payroll portability information.")
  public List<PayrollDetail> getPayrollPortability() {
    return payrollPortability;
  }

  public void setPayrollPortability(List<PayrollDetail> payrollPortability) {
    this.payrollPortability = payrollPortability;
  }

  public PeriodDetail digitalChannels(List<DigitalChannelDetail> digitalChannels) {
    this.digitalChannels = digitalChannels;
    return this;
  }

  public PeriodDetail addDigitalChannelsItem(DigitalChannelDetail digitalChannelsItem) {
    if (this.digitalChannels == null) {
      this.digitalChannels = new ArrayList<DigitalChannelDetail>();
    }
    this.digitalChannels.add(digitalChannelsItem);
    return this;
  }

   /**
   * Displays if the customer has used digital channels.
   * @return digitalChannels
  **/
  @Schema(description = "Displays if the customer has used digital channels.")
  public List<DigitalChannelDetail> getDigitalChannels() {
    return digitalChannels;
  }

  public void setDigitalChannels(List<DigitalChannelDetail> digitalChannels) {
    this.digitalChannels = digitalChannels;
  }

  public PeriodDetail status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Indicates the status of the period.   * &#x60;ONGOING&#x60; -  Indicates that status for period is in progress.   * &#x60;FINISH&#x60; - Indicates that the period has ended. 
   * @return status
  **/
  @Schema(description = "Indicates the status of the period.   * `ONGOING` -  Indicates that status for period is in progress.   * `FINISH` - Indicates that the period has ended. ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeriodDetail periodDetail = (PeriodDetail) o;
    return Objects.equals(this.periodId, periodDetail.periodId) &&
        Objects.equals(this.initialDate, periodDetail.initialDate) &&
        Objects.equals(this.dueDate, periodDetail.dueDate) &&
        Objects.equals(this.accumulatedPurchases, periodDetail.accumulatedPurchases) &&
        Objects.equals(this.cardPayment, periodDetail.cardPayment) &&
        Objects.equals(this.recurrentPayment, periodDetail.recurrentPayment) &&
        Objects.equals(this.domiciliation, periodDetail.domiciliation) &&
        Objects.equals(this.assistance, periodDetail.assistance) &&
        Objects.equals(this.payrollPortability, periodDetail.payrollPortability) &&
        Objects.equals(this.digitalChannels, periodDetail.digitalChannels) &&
        Objects.equals(this.status, periodDetail.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(periodId, initialDate, dueDate, accumulatedPurchases, cardPayment, recurrentPayment, domiciliation, assistance, payrollPortability, digitalChannels, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeriodDetail {\n");
    
    sb.append("    periodId: ").append(toIndentedString(periodId)).append("\n");
    sb.append("    initialDate: ").append(toIndentedString(initialDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    accumulatedPurchases: ").append(toIndentedString(accumulatedPurchases)).append("\n");
    sb.append("    cardPayment: ").append(toIndentedString(cardPayment)).append("\n");
    sb.append("    recurrentPayment: ").append(toIndentedString(recurrentPayment)).append("\n");
    sb.append("    domiciliation: ").append(toIndentedString(domiciliation)).append("\n");
    sb.append("    assistance: ").append(toIndentedString(assistance)).append("\n");
    sb.append("    payrollPortability: ").append(toIndentedString(payrollPortability)).append("\n");
    sb.append("    digitalChannels: ").append(toIndentedString(digitalChannels)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
