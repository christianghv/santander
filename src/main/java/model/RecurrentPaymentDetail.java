/*
 * Credits
 * The Credits API provides information about customer credit lines.
 *
 * OpenAPI spec version: 2.2.0
 * Contact: gipinacho@santander.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Retrieves the recurrent payment detail information
 */
@Schema(description = "Retrieves the recurrent payment detail information")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-04-11T10:52:34.405704-05:00[America/Bogota]")
public class RecurrentPaymentDetail {
  @SerializedName("id")
  private String id = null;

  /**
   * Indicates the status of the recurrent payment.   * &#x60;ACTIVE&#x60; -  Indicates that status for recurrent payment is active in this moment.   * &#x60;INACTIVE&#x60; - Indicates that the recurrent payment status is inactive. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    INACTIVE("INACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("operation_date")
  private OffsetDateTime operationDate = null;

  public RecurrentPaymentDetail id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Indicates the reccurrent payment identifier.
   * @return id
  **/
  @Schema(example = "01", description = "Indicates the reccurrent payment identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public RecurrentPaymentDetail status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Indicates the status of the recurrent payment.   * &#x60;ACTIVE&#x60; -  Indicates that status for recurrent payment is active in this moment.   * &#x60;INACTIVE&#x60; - Indicates that the recurrent payment status is inactive. 
   * @return status
  **/
  @Schema(description = "Indicates the status of the recurrent payment.   * `ACTIVE` -  Indicates that status for recurrent payment is active in this moment.   * `INACTIVE` - Indicates that the recurrent payment status is inactive. ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public RecurrentPaymentDetail operationDate(OffsetDateTime operationDate) {
    this.operationDate = operationDate;
    return this;
  }

   /**
   * Indicates the date on which the recurrent payment was made. [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html
   * @return operationDate
  **/
  @Schema(example = "2012-02-16T23:38:45.408Z", description = "Indicates the date on which the recurrent payment was made. [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html")
  public OffsetDateTime getOperationDate() {
    return operationDate;
  }

  public void setOperationDate(OffsetDateTime operationDate) {
    this.operationDate = operationDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurrentPaymentDetail recurrentPaymentDetail = (RecurrentPaymentDetail) o;
    return Objects.equals(this.id, recurrentPaymentDetail.id) &&
        Objects.equals(this.status, recurrentPaymentDetail.status) &&
        Objects.equals(this.operationDate, recurrentPaymentDetail.operationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, operationDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurrentPaymentDetail {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    operationDate: ").append(toIndentedString(operationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
