/*
 * Credits
 * The Credits API provides information about customer credit lines.
 *
 * OpenAPI spec version: 2.2.0
 * Contact: gipinacho@santander.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The available balances for a customer credit line. 
 */
@Schema(description = "The available balances for a customer credit line. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-04-11T10:52:34.405704-05:00[America/Bogota]")
public class CreditBalances {
  @SerializedName("current")
  private AllOfCreditBalancesCurrent current = null;

  @SerializedName("available_credit")
  private AllOfCreditBalancesAvailableCredit availableCredit = null;

  @SerializedName("pending")
  private AllOfCreditBalancesPending pending = null;

  @SerializedName("minimum_payment")
  private AllOfCreditBalancesMinimumPayment minimumPayment = null;

  @SerializedName("statement")
  private AllOfCreditBalancesStatement statement = null;

  @SerializedName("credit_limit")
  private AllOfCreditBalancesCreditLimit creditLimit = null;

  @SerializedName("fixed_payment")
  private AllOfCreditBalancesFixedPayment fixedPayment = null;

  public CreditBalances current(AllOfCreditBalancesCurrent current) {
    this.current = current;
    return this;
  }

   /**
   * Indicates the current balance of the credit line.
   * @return current
  **/
  @Schema(required = true, description = "Indicates the current balance of the credit line.")
  public AllOfCreditBalancesCurrent getCurrent() {
    return current;
  }

  public void setCurrent(AllOfCreditBalancesCurrent current) {
    this.current = current;
  }

  public CreditBalances availableCredit(AllOfCreditBalancesAvailableCredit availableCredit) {
    this.availableCredit = availableCredit;
    return this;
  }

   /**
   * Available money in the credit card.
   * @return availableCredit
  **/
  @Schema(description = "Available money in the credit card.")
  public AllOfCreditBalancesAvailableCredit getAvailableCredit() {
    return availableCredit;
  }

  public void setAvailableCredit(AllOfCreditBalancesAvailableCredit availableCredit) {
    this.availableCredit = availableCredit;
  }

  public CreditBalances pending(AllOfCreditBalancesPending pending) {
    this.pending = pending;
    return this;
  }

   /**
   * Authorized money withheld from credit card for transactions in transit.
   * @return pending
  **/
  @Schema(required = true, description = "Authorized money withheld from credit card for transactions in transit.")
  public AllOfCreditBalancesPending getPending() {
    return pending;
  }

  public void setPending(AllOfCreditBalancesPending pending) {
    this.pending = pending;
  }

  public CreditBalances minimumPayment(AllOfCreditBalancesMinimumPayment minimumPayment) {
    this.minimumPayment = minimumPayment;
    return this;
  }

   /**
   * Shows the determined amount that corresponds to the minimum payment.
   * @return minimumPayment
  **/
  @Schema(description = "Shows the determined amount that corresponds to the minimum payment.")
  public AllOfCreditBalancesMinimumPayment getMinimumPayment() {
    return minimumPayment;
  }

  public void setMinimumPayment(AllOfCreditBalancesMinimumPayment minimumPayment) {
    this.minimumPayment = minimumPayment;
  }

  public CreditBalances statement(AllOfCreditBalancesStatement statement) {
    this.statement = statement;
    return this;
  }

   /**
   * Payment amount in order to not generate interests.
   * @return statement
  **/
  @Schema(description = "Payment amount in order to not generate interests.")
  public AllOfCreditBalancesStatement getStatement() {
    return statement;
  }

  public void setStatement(AllOfCreditBalancesStatement statement) {
    this.statement = statement;
  }

  public CreditBalances creditLimit(AllOfCreditBalancesCreditLimit creditLimit) {
    this.creditLimit = creditLimit;
    return this;
  }

   /**
   * Credit limit granted by the financial institution.
   * @return creditLimit
  **/
  @Schema(required = true, description = "Credit limit granted by the financial institution.")
  public AllOfCreditBalancesCreditLimit getCreditLimit() {
    return creditLimit;
  }

  public void setCreditLimit(AllOfCreditBalancesCreditLimit creditLimit) {
    this.creditLimit = creditLimit;
  }

  public CreditBalances fixedPayment(AllOfCreditBalancesFixedPayment fixedPayment) {
    this.fixedPayment = fixedPayment;
    return this;
  }

   /**
   * Indicates the monthly payment that the customer has to make once an agreement has been reached with the financial institution.
   * @return fixedPayment
  **/
  @Schema(description = "Indicates the monthly payment that the customer has to make once an agreement has been reached with the financial institution.")
  public AllOfCreditBalancesFixedPayment getFixedPayment() {
    return fixedPayment;
  }

  public void setFixedPayment(AllOfCreditBalancesFixedPayment fixedPayment) {
    this.fixedPayment = fixedPayment;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditBalances creditBalances = (CreditBalances) o;
    return Objects.equals(this.current, creditBalances.current) &&
        Objects.equals(this.availableCredit, creditBalances.availableCredit) &&
        Objects.equals(this.pending, creditBalances.pending) &&
        Objects.equals(this.minimumPayment, creditBalances.minimumPayment) &&
        Objects.equals(this.statement, creditBalances.statement) &&
        Objects.equals(this.creditLimit, creditBalances.creditLimit) &&
        Objects.equals(this.fixedPayment, creditBalances.fixedPayment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(current, availableCredit, pending, minimumPayment, statement, creditLimit, fixedPayment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditBalances {\n");
    
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    availableCredit: ").append(toIndentedString(availableCredit)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    minimumPayment: ").append(toIndentedString(minimumPayment)).append("\n");
    sb.append("    statement: ").append(toIndentedString(statement)).append("\n");
    sb.append("    creditLimit: ").append(toIndentedString(creditLimit)).append("\n");
    sb.append("    fixedPayment: ").append(toIndentedString(fixedPayment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
