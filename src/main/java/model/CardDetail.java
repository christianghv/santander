/*
 * Credits
 * The Credits API provides information about customer credit lines.
 *
 * OpenAPI spec version: 2.2.0
 * Contact: gipinacho@santander.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CardDetail
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-04-11T10:52:34.405704-05:00[America/Bogota]")
public class CardDetail {
  @SerializedName("current_limit")
  private AllOfCardDetailCurrentLimit currentLimit = null;

  @SerializedName("display_number")
  private String displayNumber = null;

  @SerializedName("type")
  private String type = null;

  /**
   * Indicates the status of the card.   * &#x60;ACTIVE&#x60; -  The card is in an active state and the customer can operate with it.   * &#x60;BLOCKED&#x60; - The card is blocked and the customer cannot used it. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    BLOCKED("BLOCKED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("potential_limit")
  private AllOfCardDetailPotentialLimit potentialLimit = null;

  @SerializedName("lower_limit")
  private AllOfCardDetailLowerLimit lowerLimit = null;

  @SerializedName("next_increase")
  private AllOfCardDetailNextIncrease nextIncrease = null;

  @SerializedName("period")
  private AllOfCardDetailPeriod period = null;

  public CardDetail currentLimit(AllOfCardDetailCurrentLimit currentLimit) {
    this.currentLimit = currentLimit;
    return this;
  }

   /**
   * Available money in the credit card.
   * @return currentLimit
  **/
  @Schema(description = "Available money in the credit card.")
  public AllOfCardDetailCurrentLimit getCurrentLimit() {
    return currentLimit;
  }

  public void setCurrentLimit(AllOfCardDetailCurrentLimit currentLimit) {
    this.currentLimit = currentLimit;
  }

  public CardDetail displayNumber(String displayNumber) {
    this.displayNumber = displayNumber;
    return this;
  }

   /**
   * Card number anonymized
   * @return displayNumber
  **/
  @Schema(example = "*8825", description = "Card number anonymized")
  public String getDisplayNumber() {
    return displayNumber;
  }

  public void setDisplayNumber(String displayNumber) {
    this.displayNumber = displayNumber;
  }

  public CardDetail type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Indicates the card type
   * @return type
  **/
  @Schema(example = "LikeU Greeen Card", description = "Indicates the card type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public CardDetail status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Indicates the status of the card.   * &#x60;ACTIVE&#x60; -  The card is in an active state and the customer can operate with it.   * &#x60;BLOCKED&#x60; - The card is blocked and the customer cannot used it. 
   * @return status
  **/
  @Schema(description = "Indicates the status of the card.   * `ACTIVE` -  The card is in an active state and the customer can operate with it.   * `BLOCKED` - The card is blocked and the customer cannot used it. ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public CardDetail potentialLimit(AllOfCardDetailPotentialLimit potentialLimit) {
    this.potentialLimit = potentialLimit;
    return this;
  }

   /**
   * Final limit in the credit card.
   * @return potentialLimit
  **/
  @Schema(description = "Final limit in the credit card.")
  public AllOfCardDetailPotentialLimit getPotentialLimit() {
    return potentialLimit;
  }

  public void setPotentialLimit(AllOfCardDetailPotentialLimit potentialLimit) {
    this.potentialLimit = potentialLimit;
  }

  public CardDetail lowerLimit(AllOfCardDetailLowerLimit lowerLimit) {
    this.lowerLimit = lowerLimit;
    return this;
  }

   /**
   * indicates the lowest amount that can be given.
   * @return lowerLimit
  **/
  @Schema(description = "indicates the lowest amount that can be given.")
  public AllOfCardDetailLowerLimit getLowerLimit() {
    return lowerLimit;
  }

  public void setLowerLimit(AllOfCardDetailLowerLimit lowerLimit) {
    this.lowerLimit = lowerLimit;
  }

  public CardDetail nextIncrease(AllOfCardDetailNextIncrease nextIncrease) {
    this.nextIncrease = nextIncrease;
    return this;
  }

   /**
   * Available money in the credit card.
   * @return nextIncrease
  **/
  @Schema(description = "Available money in the credit card.")
  public AllOfCardDetailNextIncrease getNextIncrease() {
    return nextIncrease;
  }

  public void setNextIncrease(AllOfCardDetailNextIncrease nextIncrease) {
    this.nextIncrease = nextIncrease;
  }

  public CardDetail period(AllOfCardDetailPeriod period) {
    this.period = period;
    return this;
  }

   /**
   * Indicates the period detail
   * @return period
  **/
  @Schema(description = "Indicates the period detail")
  public AllOfCardDetailPeriod getPeriod() {
    return period;
  }

  public void setPeriod(AllOfCardDetailPeriod period) {
    this.period = period;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardDetail cardDetail = (CardDetail) o;
    return Objects.equals(this.currentLimit, cardDetail.currentLimit) &&
        Objects.equals(this.displayNumber, cardDetail.displayNumber) &&
        Objects.equals(this.type, cardDetail.type) &&
        Objects.equals(this.status, cardDetail.status) &&
        Objects.equals(this.potentialLimit, cardDetail.potentialLimit) &&
        Objects.equals(this.lowerLimit, cardDetail.lowerLimit) &&
        Objects.equals(this.nextIncrease, cardDetail.nextIncrease) &&
        Objects.equals(this.period, cardDetail.period);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentLimit, displayNumber, type, status, potentialLimit, lowerLimit, nextIncrease, period);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardDetail {\n");
    
    sb.append("    currentLimit: ").append(toIndentedString(currentLimit)).append("\n");
    sb.append("    displayNumber: ").append(toIndentedString(displayNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    potentialLimit: ").append(toIndentedString(potentialLimit)).append("\n");
    sb.append("    lowerLimit: ").append(toIndentedString(lowerLimit)).append("\n");
    sb.append("    nextIncrease: ").append(toIndentedString(nextIncrease)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
